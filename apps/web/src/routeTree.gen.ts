/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as DashboardPostureRouteImport } from './routes/dashboard/posture'
import { Route as DashboardHealthRouteImport } from './routes/dashboard/health'
import { Route as DashboardGoalsRouteImport } from './routes/dashboard/goals'
import { Route as AuthLoginRouteImport } from './routes/auth/Login'

const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardPostureRoute = DashboardPostureRouteImport.update({
  id: '/posture',
  path: '/posture',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardHealthRoute = DashboardHealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardGoalsRoute = DashboardGoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/Login',
  path: '/auth/Login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/docs': typeof DocsRoute
  '/auth/Login': typeof AuthLoginRoute
  '/dashboard/goals': typeof DashboardGoalsRoute
  '/dashboard/health': typeof DashboardHealthRoute
  '/dashboard/posture': typeof DashboardPostureRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/docs': typeof DocsRoute
  '/auth/Login': typeof AuthLoginRoute
  '/dashboard/goals': typeof DashboardGoalsRoute
  '/dashboard/health': typeof DashboardHealthRoute
  '/dashboard/posture': typeof DashboardPostureRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/docs': typeof DocsRoute
  '/auth/Login': typeof AuthLoginRoute
  '/dashboard/goals': typeof DashboardGoalsRoute
  '/dashboard/health': typeof DashboardHealthRoute
  '/dashboard/posture': typeof DashboardPostureRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/dashboard'
    | '/docs'
    | '/auth/Login'
    | '/dashboard/goals'
    | '/dashboard/health'
    | '/dashboard/posture'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/docs'
    | '/auth/Login'
    | '/dashboard/goals'
    | '/dashboard/health'
    | '/dashboard/posture'
    | '/dashboard/settings'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/dashboard'
    | '/docs'
    | '/auth/Login'
    | '/dashboard/goals'
    | '/dashboard/health'
    | '/dashboard/posture'
    | '/dashboard/settings'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  DocsRoute: typeof DocsRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/posture': {
      id: '/dashboard/posture'
      path: '/posture'
      fullPath: '/dashboard/posture'
      preLoaderRoute: typeof DashboardPostureRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/health': {
      id: '/dashboard/health'
      path: '/health'
      fullPath: '/dashboard/health'
      preLoaderRoute: typeof DashboardHealthRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/goals': {
      id: '/dashboard/goals'
      path: '/goals'
      fullPath: '/dashboard/goals'
      preLoaderRoute: typeof DashboardGoalsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/Login': {
      id: '/auth/Login'
      path: '/auth/Login'
      fullPath: '/auth/Login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardGoalsRoute: typeof DashboardGoalsRoute
  DashboardHealthRoute: typeof DashboardHealthRoute
  DashboardPostureRoute: typeof DashboardPostureRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardGoalsRoute: DashboardGoalsRoute,
  DashboardHealthRoute: DashboardHealthRoute,
  DashboardPostureRoute: DashboardPostureRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  DashboardRoute: DashboardRouteWithChildren,
  DocsRoute: DocsRoute,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
